generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model applogs {
  id       Int      @id @default(autoincrement())
  context  String   @unique
  logarray String[]
}

model dispatchers {
  id                    Int       @id @unique @default(autoincrement())
  currentDuration       Float
  dispatcherId          Int
  dispatcherName        String
  isOnline              Boolean
  lastOnlineTimestamp   Float
  region                String
  stationHash           String
  stationName           String
  timestampFrom         Float
  timestampTo           Float?
  dispatcherLevel       Int?
  dispatcherIsSupporter Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?
  dispatcherStatus      Float     @default(-1)
  dispatcherRate        Int       @default(0)
  statusHistory         String[]  @default([])
  hidden                Boolean   @default(false)
}

model sceneries {
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  id             Int       @id @unique @default(autoincrement())
  name           String    @unique
  SUP            Boolean
  authors        String?
  availability   String
  backupJSON     String?
  checkpoints    String?
  controlType    String
  lines          String?
  project        String?
  reqLevel       Int
  routes         String?
  routesInfo     Json[]
  signalType     String
  supportersOnly Boolean?  @default(false)
  url            String?
  projectUrl     String?
  hash           String?
  abbr           String    @default("")
}

model timetables {
  id                            Int          @id @unique @default(autoincrement())
  allStopsCount                 Int
  authorId                      Int?
  authorName                    String?
  beginDate                     DateTime     @db.Timestamp(6)
  confirmedStopsCount           Int
  currentDistance               Float
  driverId                      Int
  driverName                    String
  endDate                       DateTime     @db.Timestamp(6)
  fulfilled                     Boolean
  route                         String
  routeDistance                 Float
  sceneriesString               String
  scheduledBeginDate            DateTime     @db.Timestamp(6)
  scheduledEndDate              DateTime     @db.Timestamp(6)
  terminated                    Boolean
  timetableId                   Int
  trainCategoryCode             String
  trainNo                       Int
  twr                           Boolean?     @default(false)
  skr                           Boolean?     @default(false)
  stockString                   String?
  stockMass                     Int?
  stockLength                   Int?
  maxSpeed                      Int?
  hashesString                  String?
  currentSceneryName            String?
  currentSceneryHash            String?
  driverIsSupporter             Boolean      @default(false)
  driverLevel                   Int?
  createdAt                     DateTime     @default(now())
  updatedAt                     DateTime?
  stopsString                   String?
  stockHistory                  String[]     @default([])
  hidden                        Boolean      @default(false)
  routeSceneries                String?
  checkpointArrivals            DateTime[]   @default(dbgenerated("(ARRAY[]::timestamp without time zone[])::timestamp(3) without time zone[]"))
  checkpointDepartures          DateTime[]   @default(dbgenerated("(ARRAY[]::timestamp without time zone[])::timestamp(3) without time zone[]"))
  checkpointArrivalsScheduled   DateTime[]   @default(dbgenerated("(ARRAY[]::timestamp without time zone[])::timestamp(3) without time zone[]"))
  checkpointDeparturesScheduled DateTime[]   @default(dbgenerated("(ARRAY[]::timestamp without time zone[])::timestamp(3) without time zone[]"))
  checkpointStopTypes           String[]     @default([])
  currentLocation               String[]     @default([])
  violations                    violations[]
}

model userlogs {
  id            Int    @id @default(autoincrement())
  username      String
  changes       Json
  changesBackup Json
}

model users {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  password   String
  roles      String[]
  profileUrl String?
}

model violations {
  id           Int           @id @unique @default(autoincrement())
  createdAt    DateTime      @default(now())
  type         ViolationType @default(SPEED)
  value        String
  stationName  String
  stationHash  String
  timetableUID Int
  timetables   timetables    @relation(fields: [timetableUID], references: [id], onDelete: Cascade)
}

model td2dailystats {
  id                    Int      @id @unique @default(autoincrement())
  datetime              DateTime @default(now()) @db.Date
  driversMax            Int
  dispatchersMax        Int
  timetablesMax         Int
  maxTimetable          String?
  mostActiveDispatchers String?
  mostActiveDrivers     String?
  longestDuties         String?
  distanceAvg           Int
  distanceSum           Int
  totalTimetables       Int
}

model td2globalstats {
  id                 Int      @id @unique @default(autoincrement())
  datetime           DateTime @default(now()) @db.Timestamptz(6)
  avgSpeed           Int
  rippedSwitches     Int
  derailments        Int
  skippedStopSignals Int
  radioStops         Int
  kills              Int
  drivenKilometers   Int
  routedTrains       Int
  dispatchers        Int
  drivers            Int
  timetables         Int
}

model td2players {
  id          Int     @id @unique @default(autoincrement())
  playerId    Int     @unique
  whitelisted Boolean @default(false)
  blacklisted Boolean @default(true)
}

model stacjobotUsers {
  id     Int    @id @unique @default(autoincrement())
  userId String @unique

  kofolaCount     Int      @default(1)
  nextKofolaTime  DateTime @default(now())
  kofolaMotoracek String   @default("motosraczek3")
}

enum ViolationType {
  SPEED
  CATEGORY
  NUMBER
  LOCO_COUNT
}
